{"version":3,"sources":["components/Header.js","components/SortingAlogrithms/sortAlgorithms.js","components/SortingVisualizer/Sortvisualizer.js","App.js","index.js"],"names":["Header","className","href","target","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","auxillaryArray","firstIndex","secondIndex","temp","getSelectionAnimations","auxilliaryArray","minIdx","selectionSort","PRIMARY_COLOR","SECONDARY_COLOR","SortVisualizer","props","state","this","reset","min","max","array_size","document","getElementsByClassName","value","random","setState","ANIMATION_SPEED_MS","arrayBars","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionAnimations","onClick","for","type","name","step","onChange","mergeSort","map","idx","React","Component","App","ReactDOM","render","getElementById"],"mappings":"sNAgBeA,EAdA,WACb,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKA,UAAU,OAAf,wBACA,mBACEC,KAAK,0DACLC,OAAO,SAFT,SAIE,kD,yDCRD,SAASC,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,EAGT,SAASI,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAjB,CACA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,IA6DlE,SAASgB,EAAKC,EAAgBC,EAAYC,GACxC,IAAIC,EAAOH,EAAeC,GAC1BD,EAAeC,GAAcD,EAAeE,GAC5CF,EAAeE,GAAeC,EAoBzB,SAASC,EAAuBtB,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAG7B,OAvBF,SAAuBmB,EAAiBtB,GACtC,IAAK,IAAIY,EAAI,EAAGA,EAAIU,EAAgBrB,OAAS,EAAGW,IAAK,CAEnD,IADA,IAAIW,EAASX,EACJC,EAAID,EAAI,EAAGC,EAAIS,EAAgBrB,OAAQY,IAC9Cb,EAAWc,KAAK,CAAC,cAAeD,EAAGU,IACnCvB,EAAWc,KAAK,CAAC,cAAeD,EAAGU,IAC/BD,EAAgBT,GAAKS,EAAgBC,KACvCA,EAASV,GAIbb,EAAWc,KAAK,CAAC,OAAQS,EAAQD,EAAgBV,KACjDZ,EAAWc,KAAK,CAAC,OAAQF,EAAGU,EAAgBC,KAC5CP,EAAKM,EAAiBC,EAAQX,IAQhCY,CAActB,EAAgBF,GAEvB,CAACA,EADRD,EAAQG,GCvGV,IAAMuB,EAAgB,YAGhBC,EAAkB,MAEHC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAE9B,MAAO,IAFL,E,qDAKnB,WACE+B,KAAKC,U,mBAGP,WAGE,IAFA,IAiKgBC,EAAKC,EAjKflC,EAAQ,GACVmC,EAAaC,SAASC,uBAAuB,WAAW,GAAGC,MACtDzB,EAAI,EAAGA,EAAIsB,EAAYtB,IAC9Bb,EAAMe,MA8JQkB,EA9JQ,GA8JHC,EA9JO,IA+JvBxB,KAAKC,MAAMD,KAAK6B,UAAYL,EAAMD,EAAM,GAAKA,KA7JlDF,KAAKS,SAAS,CAAExC,Y,uBAGlB,WAIE,IAHA,IAAIyC,EACFL,SAASC,uBAAuB,YAAY,GAAGC,MAC3CrC,EAAaF,EAAuBgC,KAAKD,MAAM9B,OAH3C,WAIDa,GACP,IAAM6B,EAAYN,SAASC,uBAAuB,aAElD,GADsBxB,EAAI,IAAM,EACb,CACjB,kBAA+BZ,EAAWY,GAA1C,GAAO8B,EAAP,KAAkBC,EAAlB,KACMC,EAAcH,EAAUC,GAAWG,MACnCC,EAAcL,EAAUE,GAAWE,MACnCE,EAAQnC,EAAI,IAAM,EAAIc,EAAkBD,EAC9CuB,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC7BnC,EAAI4B,QAEPQ,YAAW,WACT,kBAA+BhD,EAAWY,GAA1C,GAAO8B,EAAP,KAAkBQ,EAAlB,KACoBT,EAAUC,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QACCtC,EAAI4B,IAjBF5B,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,2BAsBX,WAIE,IAHA,IAAI4B,EACFL,SAASC,uBAAuB,YAAY,GAAGC,MACjD,EAAgChB,EAAuBS,KAAKD,MAAM9B,OAAlE,mBAAOC,EAAP,KACSY,GADT,KACa,GAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CAC1C,IAAMwC,EACiB,gBAArBpD,EAAWY,GAAG,IACO,gBAArBZ,EAAWY,GAAG,GACV6B,EAAYN,SAASC,uBAAuB,cAC5B,IAAlBgB,EAAyB,WAC3B,IAAML,EACiB,gBAArB/C,EAAWY,GAAG,GAAuBc,EAAkBD,EACzD,cAAyCzB,EAAWY,GAApD,GAAayC,GAAb,WAA0BC,EAA1B,KACMV,EAAcH,EAAUY,GAAaR,MACrCC,EAAcL,EAAUa,GAAaT,MAC3CG,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC7BnC,EAAI4B,GAToB,GAUrB,WACN,kBAAoCxC,EAAWY,GAA/C,GAAa2C,GAAb,WAAuBL,EAAvB,KACMM,EAAWf,EAAUc,GAAUV,MACrCG,YAAW,WACTQ,EAASL,OAAT,UAAqBD,EAArB,QACCtC,EAAI4B,GALD,M,2BAUZ,WAIE,IAHA,IAAIA,EACFL,SAASC,uBAAuB,YAAY,GAAGC,MACjD,EDgDG,SAAgCtC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAG7B,OA3BF,SAAuBD,EAAgBF,GACrC,IAAK,IAAIY,EAAI,EAAGA,EAAIV,EAAeD,OAAQW,IAAK,CAC9C,IAAI6C,EAAMvD,EAAeU,GACrBC,EAAID,EAAI,EAIZ,IAFAZ,EAAWc,KAAK,CAAC,cAAeD,EAAGD,IACnCZ,EAAWc,KAAK,CAAC,cAAeD,EAAGD,IAC5BC,GAAK,GAAKX,EAAeW,GAAK4C,GACnCzD,EAAWc,KAAK,CAAC,YAAaD,EAAI,EAAGX,EAAeW,KACpDX,EAAeW,EAAI,GAAKX,EAAeW,IACvCA,GAAQ,IACC,IACPb,EAAWc,KAAK,CAAC,cAAeD,EAAGD,IACnCZ,EAAWc,KAAK,CAAC,cAAeD,EAAGD,KAGvCZ,EAAWc,KAAK,CAAC,YAAaD,EAAI,EAAG4C,IACrCvD,EAAeW,EAAI,GAAK4C,GAQ1BC,CAAcxD,EAAgBF,GAEvB,CAACA,EADRD,EAAQG,GCrD0ByD,CAAuB7B,KAAKD,MAAM9B,OAAlE,mBAAOC,EAAP,KACSY,GADT,KACa,GAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CAC1C,IAAMwC,EACiB,gBAArBpD,EAAWY,GAAG,IACO,gBAArBZ,EAAWY,GAAG,GACV6B,EAAYN,SAASC,uBAAuB,cAC5B,IAAlBgB,EAAyB,WAC3B,IAAML,EACiB,gBAArB/C,EAAWY,GAAG,GAAuBc,EAAkBD,EACzD,cAAyCzB,EAAWY,GAApD,GAAayC,GAAb,WAA0BC,EAA1B,KACMV,EAAcH,EAAUY,GAAaR,MACrCC,EAAcL,EAAUa,GAAaT,MAC3CG,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC7BnC,EAAI4B,GAToB,GAUrB,WACN,kBAAoCxC,EAAWY,GAA/C,GAAa2C,GAAb,WAAuBL,EAAvB,KACMM,EAAWf,EAAUc,GAAUV,MACrCG,YAAW,WACTQ,EAASL,OAAT,UAAqBD,EAArB,QACCtC,EAAI4B,GALD,M,oBAUZ,WAAU,IAAD,OACCzC,EAAU+B,KAAKD,MAAf9B,MAER,OACE,gCACE,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,0CACA,qBAAKA,UAAU,aACf,wBAAQA,UAAU,YAAYiE,QAAS,kBAAM,EAAK7B,SAAlD,4BAGA,qBAAKpC,UAAU,aACf,sBAAKA,UAAU,OAAf,UACE,uBAAOkE,IAAI,OAAX,kBACA,uBACElE,UAAU,UACVmE,KAAK,QACL9B,IAAI,IACJC,IAAI,MACJ8B,KAAK,OACLC,KAAK,IACLC,SAAU,kBAAM,EAAKlC,cAIzB,sBAAKpC,UAAU,QAAf,UACE,uBAAOkE,IAAI,QAAX,kDAGA,uBACElE,UAAU,WACVmE,KAAK,QACL9B,IAAI,IACJC,IAAI,MACJ8B,KAAK,QACLC,KAAK,SAIT,qBAAKrE,UAAU,aACf,sBAAKA,UAAU,YAAf,UACE,wBAAQiE,QAAS,kBAAM,EAAKpC,iBAA5B,4BAGA,wBAAQoC,QAAS,kBAAM,EAAKF,iBAA5B,4BAGA,wBAAQE,QAAS,kBAAM,EAAKM,aAA5B,gCAKN,qBAAKvE,UAAU,kBAAf,SACGI,EAAMoE,KAAI,SAAC9B,EAAO+B,GAAR,OACT,qBACEzE,UAAU,YAEVkD,MAAO,CACLM,OAAO,GAAD,OAAKd,EAAL,QAFH+B,e,GAhKyBC,IAAMC,WCAnCC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNC,IAASC,OAAO,cAAC,EAAD,IAAStC,SAASuC,eAAe,W","file":"static/js/main.035cfd62.chunk.js","sourcesContent":["import \"./Header.css\";\n\nconst Header = () => {\n  return (\n    <div className=\"headBackground\">\n      <div className=\"logo\">AlgoVisual</div>\n      <a\n        href=\"https://ca.linkedin.com/in/emmanuel-efewongbe-bb1106186\"\n        target=\"_blank\"\n      >\n        <button>Author</button>\n      </a>\n    </div>\n  );\n};\n\nexport default Header;\n","//>>>>>>>>>>MERGE SORT<<<<<<<<<<<<<<<\n//Merge sort from Clement Mihailescu\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n//<<<<<<<<<<<<<<<Selection Sort<<<<<<<<<<<<<<<<<<<\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction selectionSort(auxilliaryArray, animations) {\n  for (let i = 0; i < auxilliaryArray.length - 1; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < auxilliaryArray.length; j++) {\n      animations.push([\"comparison1\", j, minIdx]);\n      animations.push([\"comparison2\", j, minIdx]);\n      if (auxilliaryArray[j] < auxilliaryArray[minIdx]) {\n        minIdx = j;\n      }\n    }\n\n    animations.push([\"swap\", minIdx, auxilliaryArray[i]]);\n    animations.push([\"swap\", i, auxilliaryArray[minIdx]]);\n    swap(auxilliaryArray, minIdx, i);\n  }\n}\n\nexport function getSelectionAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  selectionSort(auxiliaryArray, animations);\n  array = auxiliaryArray;\n  return [animations, array];\n}\n\n//<<<<<<<<<<<<<<<Insertion Sort<<<<<<<<<<<\n\nfunction insertionSort(auxiliaryArray, animations) {\n  for (let i = 1; i < auxiliaryArray.length; i++) {\n    let key = auxiliaryArray[i];\n    let j = i - 1;\n\n    animations.push([\"comparison1\", j, i]);\n    animations.push([\"comparison2\", j, i]);\n    while (j >= 0 && auxiliaryArray[j] > key) {\n      animations.push([\"overwrite\", j + 1, auxiliaryArray[j]]);\n      auxiliaryArray[j + 1] = auxiliaryArray[j];\n      j = j - 1;\n      if (j >= 0) {\n        animations.push([\"comparison1\", j, i]);\n        animations.push([\"comparison2\", j, i]);\n      }\n    }\n    animations.push([\"overwrite\", j + 1, key]);\n    auxiliaryArray[j + 1] = key;\n  }\n}\n\nexport function getInsertionAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  insertionSort(auxiliaryArray, animations);\n  array = auxiliaryArray;\n  return [animations, array];\n}\n","import React from \"react\";\nimport \"./Sortvisualizer.css\";\nimport { getMergeSortAnimations } from \"../SortingAlogrithms/sortAlgorithms\";\nimport { getSelectionAnimations } from \"../SortingAlogrithms/sortAlgorithms\";\nimport { getInsertionAnimations } from \"../SortingAlogrithms/sortAlgorithms\";\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"turquoise\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"red\";\n\nexport default class SortVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { array: [] };\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  reset() {\n    const array = [];\n    let array_size = document.getElementsByClassName(\"sizeBar\")[0].value;\n    for (let i = 0; i < array_size; i++) {\n      array.push(randomVals(10, 500));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    let ANIMATION_SPEED_MS =\n      document.getElementsByClassName(\"speedBar\")[0].value;\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    let ANIMATION_SPEED_MS =\n      document.getElementsByClassName(\"speedBar\")[0].value;\n    const [animations, sortArray] = getSelectionAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    let ANIMATION_SPEED_MS =\n      document.getElementsByClassName(\"speedBar\")[0].value;\n    const [animations, sortArray] = getInsertionAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <div className=\"dashboard\">\n          <div className=\"selectAlg\">\n            <h3>Sorting </h3>\n            <div className=\"pavement\"></div>\n            <button className=\"subButton\" onClick={() => this.reset()}>\n              Generate Array\n            </button>\n            <div className=\"pavement\"></div>\n            <div className=\"size\">\n              <label for=\"size\">Size</label>\n              <input\n                className=\"sizeBar\"\n                type=\"range\"\n                min=\"2\"\n                max=\"125\"\n                name=\"size\"\n                step=\"1\"\n                onChange={() => this.reset()}\n              />\n            </div>\n\n            <div className=\"speed\">\n              <label for=\"speed\">\n                (Faster)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Slower)\n              </label>\n              <input\n                className=\"speedBar\"\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                name=\"speed\"\n                step=\"1\"\n              />\n            </div>\n\n            <div className=\"pavement\"></div>\n            <div className=\"buttonNav\">\n              <button onClick={() => this.selectionSort()}>\n                Selection sort\n              </button>\n              <button onClick={() => this.insertionSort()}>\n                Insertion sort\n              </button>\n              <button onClick={() => this.mergeSort()}>Merge sort</button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                height: `${value}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomVals(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import Header from \"./components/Header\";\nimport SortVisualizer from \"./components/SortingVisualizer/Sortvisualizer\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <SortVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}